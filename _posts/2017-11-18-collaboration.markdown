---
layout: post
title:      "Collaboration"
date:       2017-11-18 16:50:54 +0000
permalink:  collaboration
---


Up until this point learning to code has been a solitary journey. Although the Flatiron School has fostered an excellent online community, I've always been more inclined to go it alone. However, as soon as I completed TTT w/ AI I realized that I had missed an important opportunity to code with a partner. I jumped at the chance to work with a teammate on Fwitter. My partner and I managed to complete the project in a single evening but through the process I very quickly realized that the challenge for this particular exercise was not in the code. Neither of us had ever worked as part of a team, and I felt like we did almost everything wrong. We didn't divide the workload, and at times ended up working on the same issues. Much of my initial work was overwritten due to merge conflicts because we were both pushing our commits to the master branch of the same repository. Eventually my partner took a break giving me several uninterrupted hours to work on my own. In our collective zeal to complete the project, we almost missed the point of our team-up. There is a lot of value in an honest assessment of our mistakes. In this case its much more important to highlight the fact that despite the issues we were having we were willing and able to communicate (until Slack went down). This process introduced an entirely new level of frustration for which the only remedy was patience. 
			The mechanics of working collaboratively were not covered in our introduction to git or github in any great detail but a quick search reveals several widely implemented methods used on both large and small group projects. In an effort to prevent similar conflicts in the future I took the time to read through some the relevant resources available. As to be expected, Github's help section had already addressed all of the problems I was having. Other resources addressed the more personal dynamics of coding as part of a team, and the personal philosophies and workflow methods of people who lead teams and manage projects. Some of the information was common sense that would have been apparent if I had taken a step back to think about the process instead of just the project. Much of what I read was more like preparation for some time in the future where working along side others or on a small part of a larger codebase. The lesson I find myself learning over and over is that almost every problem or issue has already been addressed by someone somewhere.
			
			
